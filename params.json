{"name":"Mento","tagline":"Mento","body":"Mento is a Python-based application, which offers an open protocol to stream and transfer MP3 files over the internet. Metadata is read using Mutagen, and presented to clients through a REST API which is written using Flask. \r\n\r\nMento is lightweight, open-source, and the data is transferred using plain HTML: use the REST API to get the ID of a track, use the same API to play the track with that ID, and Mento will return the MP3 file. Or use the API to get the artwork: it is all possible with Mento. If you think that you need more metadata from an audio file, just fork the project, make sure to notify users that you are using a version of the API which uses a different setup for returning the library data, and you are good to go. Mento uses a simple method of transferring data, which can easily be incorporated in apps for the CLI, mobile devices, rich GUI applications, or a PHP-based web interface: the possibilities are endless.\r\n\r\n## Notes\r\n\r\nFor now, Mento does not use any authentication. This means that you should not open up Mento to a port which is open for everyone, as one can easily create a lot of load on your server by constantly refreshing your library. \r\n\r\nMento itself does not contain any music. Do not use it for illegal purposes: Mento is written for personal use in your own house. Although you could use it over the internet, it is not recommended, due to the lack of security measures (that will be implemented as soon as possible).\r\n\r\nMento will stop when you close the terminal window where Mento is running. Since a Python application can run in the background on a different way depending on your OS, you will have to look up how it is done on your particular distribution.\r\n\r\n## Install\r\n\r\nTo use Mento, first clone it from the repository:\r\n\r\n`git clone https://github.com/icx9/mento.git`\r\n\r\nGo to the directory of Mento:\r\n\r\n`cd mento`\r\n\r\nMake sure Python 2.7 and pip are installed, and set up the virtual environment:\r\n\r\n`virtualenv --no-site-packages engine`\r\n\r\nEnter the virtual environment:\r\n\r\n`. engine/bin/activate`\r\n\r\nInstall the packages:\r\n\r\n`pip install -r requirements.txt`\r\n\r\nNext up, copy 'config.cfg.example' to 'config.cfg'. Open up 'config.cfg' in your favourite text editor, and set the path to your music directory. \r\n\r\nStart the application:\r\n\r\n`./app.py`\r\n\r\nAnd Mento is running!\r\n\r\n## Usage\r\n\r\nWhen Mento is running, open up a browser and go to 'IP OF YOUR SERVER:1337'. You should get 'Invalid API Call'. Now, you can use 'IP OF YOUR SERVER:1337/<AN API CALL>' to control Mento. \r\n\r\n## API\r\n\r\n### /manage/refresh\r\nStarts a scan of your library to generate 'info.mento', 'library.mento' and 'paths.mento'. Depending on the size of your music library, this can take quite some time! Chances are that if you have tens of gigabytes of music, your browser could theoretically give a time-out. If this occurs, we probably have to write a command line interface to start the library scan. **Mento is unusable before you did this atleast once!**\r\n\r\n### /manage/info\r\nReturns some basic information about the music library.\r\n\r\n### /user/library\r\nReturns a file which contains all the data of the music. The file may look unordered, but it is actually quite simple: split the file on the delimiter `__new__`. Then, split the result again on the delimiter `__break__`. The first variable is the ID, the second variable is the artist, the third is the album, the fourth is the title, and the fifth one is the track number. If for example, I want to return a list of all tracks in Python, I simply get the file '/user/library', and save the data to a variable called 'library_result'. It is just a matter of:\r\n\r\n`the_tracks = library_result.split('__break__')`\r\n\r\n`for each track in the_tracks:`\r\n\r\n`    the_id = track.split('__break__')[0]`\r\n\r\n`    the_artist = track.split('__break__')[1]`\r\n\r\n`    the_album = track.split('__break__')[2]`\r\n\r\n`    the_title = track.split('__break__')[3]`\r\n\r\n`    the_number = track.split('__break__')[4]`\r\n\r\n### /user/play/ID\r\nReplace 'ID' with an ID you got from '/user/library'. It will return an MP3 file of that track. Play it using a media player, save it using wget, do whatever you want.\r\n\r\n### /user/artwork/ID\r\nReplace 'ID' with an ID you got from '/user/library'. It will return a JPG file of the album art. You will only get a JPG if you saved a file called 'cover.jpg' in the same directory as the MP3 file. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}